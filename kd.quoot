clj/s code:


(defn magnitude [v] (Math/sqrt (apply + (map #(* % %) v))))

(def distance (comp magnitude (partial map -)))

(defn kd-insert [tree x & [depth]]
  (let [depth (or depth 0)]
    (if tree
      (let [dim (mod depth (count x))]
        (update tree (if (< (x dim) ((tree 0) dim)) 1 2) kd-insert x (inc depth)))
      [x nil nil])))

(defn kd-nearest [tree x & [depth]]
  (let [depth (or depth 0)
        node-point (tree 0)
        d (if (= x node-point)
            ##Inf
            (distance x node-point))
        [left-child right-child] (rest tree)
        node-result [d node-point]
        choose-result (fn [a b] (if (< (a 0) (b 0)) a b))]
    (if (and (nil? left-child) (nil? right-child))
      node-result
      (if (or (nil? left-child) (nil? right-child))
        (let [child-result (kd-nearest (or left-child right-child)
                                       x
                                       (inc depth))]
          (if (< (child-result 0) d)
            child-result
            node-result))
        (let [dim (mod depth (count x))
              primary-child (if (< (x dim) ((tree 0) dim))
                              left-child
                              right-child)
              best-result (choose-result node-result
                                         (kd-nearest primary-child
                                                     x
                                                     (inc depth)))]
          (if (< (best-result 0)
                 (abs (- (x dim)
                         (node-point dim))))
            best-result
            (choose-result best-result
                           (kd-nearest (if (= primary-child left-child)
                                         right-child
                                         left-child)
                                       x
                                       (inc depth)))))))))

(let [tree (time (nth (iterate #(kd-insert % [(rand) (rand) (rand)])
                               nil)
                      10000))]
  (time (count (mapv #(kd-nearest tree %)
                     (repeatedly 10000
                                 (fn [] [(rand) (rand) (rand)]))))))
; cljs results: 117ms for construction, 1978ms for search
; clj results: 47ms for construction, 432ms for search






quoot code:

need to implement:
  sqrt
  update
  and
  repeatedly
  time


(defn magnitude [v] (sqrt (apply + (map (fn [x] (* x x)) v))))

(def distance (. magnitude (| map -)))

(defn kd-insert [tree x depth]
  (if tree
    (let [dim (mod depth (count x))]
      (update tree
              (if (< (x dim) ((tree 0) dim)) 1 2)
              (fn [inner-tree]
                (kd-insert inner-tree
                           x
                           (inc depth)))))
    [x nil nil]))

(defn kd-nearest [tree x depth]
  (let [node-point (tree 0)
        d (if (= x node-point)
            #inf
            (distance x node-point))
        left-child (tree 1)
        right-child (tree 2)
        node-result [d node-point]
        choose-result (fn [a b] (if (< (a 0) (b 0)) a b))]
    (if (and (nil? left-child) (nil? right-child))
      node-result
      (if (or (nil? left-child) (nil? right-child))
        (let [child-result (kd-nearest (or left-child right-child)
                                       x
                                       (inc depth))]
          (if (< (child-result 0) d)
            child-result
            node-result))
        (let [dim (mod depth (count x))
              primary-child (if (< (x dim) ((tree 0) dim))
                              left-child
                              right-child)
              best-result (choose-result node-result
                                         (kd-nearest primary-child
                                                     x
                                                     (inc depth)))]
          (if (< (best-result 0)
                 (abs (- (x dim)
                         (node-point dim))))
            best-result
            (choose-result best-result
                           (kd-nearest (if (= primary-child left-child)
                                         right-child
                                         left-child)
                                       x
                                       (inc depth)))))))))

(let [tree (time (nth (iterate (fn [t] (kd-insert t [(rand) (rand) (rand)]))
                               nil)
                      10000))]
  (time (count (mapv (fn [p] (kd-nearest tree p))
                     (repeatedly 10000
                                 (fn [] [(rand) (rand) (rand)]))))))